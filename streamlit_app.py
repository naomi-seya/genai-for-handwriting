import os
import json
import base64
import boto3
from PIL import Image
import streamlit as st
from io import BytesIO
import pandas as pd

from botocore.exceptions import ClientError

class ImageError(Exception):
    "Custom exception for errors returned by SDXL"
    def __init__(self, message):
        self.message = message

import logging
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

# BedrockモデルのモデルIDを設定
BEDROCK_MODEL_ID = 'anthropic.claude-3-sonnet-20240229-v1:0'

def generate_answer(query, data):
    """
    Generate an answer from the registered data based on the given query.
    Args:
        query (str): The user's query.
        data (list): The list of registered data.
    Returns:
        answer (str): The generated answer.
    """
    # Generate answer from data
    if "submitted" in query and "data" in query:
        return f"Currently, {len(data)} data entries have been submitted."
    elif "email" in query:
        emails = [d["email"] for d in data]
        return "The registered email addresses are:\n" + "\n".join(emails)
    else:
        return "Sorry, I cannot provide an answer to that question."

def generate_image(model_id, body):
    """
    Generate an image using SDXL 1.0 on demand.
    Args:
        model_id (str): The model ID to use.
        body (str) : The request body to use.
    Returns:
        image_bytes (bytes): The image generated by the model.
    """

    logger.info("Generating image with SDXL model %s", model_id)

    bedrock = boto3.client(service_name='bedrock-runtime')
   
    accept = "application/json"
    content_type = "application/json"

    response = bedrock.invoke_model(
        body=body, modelId=model_id, accept=accept, contentType=content_type
    )
    response_body = json.loads(response.get("body").read())
    print(response_body['result'])

    base64_image = response_body.get("artifacts")[0].get("base64")
    base64_bytes = base64_image.encode('ascii')
    image_bytes = base64.b64decode(base64_bytes)

    finish_reason = response_body.get("artifacts")[0].get("finishReason")

    if finish_reason == 'ERROR' or finish_reason == 'CONTENT_FILTERED':
        raise ImageError(f"Image generation error. Error code is {finish_reason}")


    logger.info("Successfully generated image withvthe SDXL 1.0 model %s", model_id)

    return image_bytes

# Streamlit app
def app():
    st.title("Transcribe App")

    # Top page
    if "page" not in st.session_state:
        st.session_state.page = "upload"

    if st.session_state.page == "upload":
        upload_page()
    elif st.session_state.page == "data_view":
        data_view_page()
    elif st.session_state.page == "chat_bot":
        chat_bot_page()

# Image upload page
def upload_page():
    st.header("Image Upload")
    uploaded_file = st.file_uploader("Choose an image", type=["jpg", "png", "jpeg"])

    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption="Uploaded Image", use_column_width=True)

        # Extract text from image
        text = extract_text_from_image(image)

        st.header("Extracted Text")
        extracted_text = st.text_area("Extracted Text", text, height=200)

        if st.button("Checked"):
            booth_number = st.text_input("Booth Number")
            alias = st.text_input("Alias")
            company_name = st.text_input("Company Name")
            department = st.text_input("Department")
            name = st.text_input("Name")
            email = st.text_input("Email Address")
            phone_number = st.text_input("Phone Number")

            data.append({
                "booth_number": booth_number,
                "alias": alias,
                "company_name": company_name,
                "department": department,
                "name": name,
                "email": email,
                "phone_number": phone_number,
                "text": extracted_text
            })

            st.success("Data has been saved.")

# Data view page
def data_view_page():
    st.header("Registered Data List")
    df = pd.DataFrame(data)
    st.dataframe(df)

    # Page navigation buttons
    if st.button("Go back to Image Upload Page"):
        st.session_state.page = "upload"
    if st.button("Go to Chatbot Page"):
        st.session_state.page = "chat_bot"

# Chatbot page
def chat_bot_page():
    st.header("Chatbot")
    query = st.text_input("Enter your question")

    if st.button("Ask"):
        answer = generate_answer(query, data)
        st.write(answer)

    # Page navigation buttons
    if st.button("Go back to Data View Page"):
        st.session_state.page = "data_view"

# Function to extract text from image
def extract_text_from_image(image):
    # Convert image to byte stream
    image_bytes = BytesIO()
    image.save(image_bytes, format="PNG")
    image_bytes = image_bytes.getvalue()

    # Extract text using Bedrock model
    bedrock = boto3.client(service_name='bedrock-runtime')
    accept = "application/json"
    content_type = "application/json"
    body = json.dumps({"image": base64.b64encode(image_bytes).decode('utf-8')})

    response = bedrock.invoke_model(
        body=body,
        modelId=BEDROCK_MODEL_ID,
        accept=accept,
        contentType=content_type
    )

    response_body = json.loads(response.get("body").read())
    extracted_text = response_body.get("result", "")

    return extracted_text

if __name__ == "__main__":
    data = [] # データを格納するリストを初期化

    # Streamlitアプリを起動
    app()

